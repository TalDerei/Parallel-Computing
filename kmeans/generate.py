# -*- coding: utf-8 -*-
"""generateKMeansData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ubDKsU2aVRi6DVJxf2wUGv3lkCW2O7IM
"""

import numpy as np

num_points_approx = 2000
diveregnce_approx = 100
datatype = 1 # 1 for integer, 2 for real
dimension_approx = 150
K_approx = 25
iteration_approx = 1000
rng = np.random.default_rng()
num_datasets = 5

for i in range(num_datasets):
    K = rng.integers(low=K_approx*0.8, high=K_approx*1.2)
    num_points = rng.integers(low=num_points_approx*0.8, high=num_points_approx*1.2)
    dimension = rng.integers(low=dimension_approx-1, high=dimension_approx+2)
    iteration = rng.integers(low=iteration_approx*0.7, high=iteration_approx*1.3)
    divergence = (rng.random()*0.4+0.8)*diveregnce_approx

    datafile = open("dataset{}.txt".format(i+3), "w")
    [datafile.write(str(int(elem))+' ') for elem in [num_points, dimension, K, iteration, 0]]
    datafile.write('\n')

    points_now = 0
    for j in range(K):
        center = divergence*(rng.random(dimension)-0.5)
        if j == K-1:
            num_points_in_cluster = num_points - points_now
        else:
            num_points_in_cluster = rng.integers(low=num_points_approx*0.8, high=num_points_approx*1.2)//K
            points_now += num_points_in_cluster
        for k in range(num_points):
            [datafile.write(str(round(elem, 2))+ ' ') for elem in rng.normal(center, 0.2*divergence, dimension)]
            datafile.write('\n')
    datafile.close()